%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 666
%%HiResBoundingBox: 0 0 2391.1199 666
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 666 re
W
q
[0.24 0 0 -0.24 0 666] cm
q
0 0 9962.5 2775 re
W*
q
[40.692242 0 0 40.705914 -276.6676 -646.76898] cm
q
86 50.939999 m
86 41.5 l
86.00985 41.380001 86.00985 41.259998 86 41.139999 c
86 37.889999 80.330002 36.139999 75 36.139999 c
69.889999 36.139999 64.489998 37.75 64 40.739998 c
63.947186 40.868103 63.920521 41.001438 63.919998 41.139999 c
63.919998 47.139999 l
59.139999 47.34 54.419998 48.93 54 51.720001 c
53.947189 51.848106 53.920521 51.981441 53.919998 52.120003 c
53.919998 71.860001 l
53.919998 75.110001 59.589996 76.860001 64.919998 76.860001 c
70.25 76.860001 75.919998 75.110001 75.919998 71.860001 c
75.919998 65.860001 l
80.919998 65.660004 85.919998 63.93 85.919998 60.860001 c
85.919998 51.5 l
85.929848 51.380001 85.929848 51.259998 85.919998 51.139999 c
85.951736 51.075359 85.978401 51.008694 86 50.939999 c
h
56 55.07 m
58.119999 56.43 61.639999 57.139999 65 57.139999 c
68.360001 57.139999 71.830002 56.450001 74 55.139999 c
74 62.389999 l
73.599998 63.59 70.199997 65.159996 65 65.159996 c
59.510002 65.159996 56 63.379997 56 62.159996 c
56.004704 62.093327 56.004704 62.026661 56 61.959995 c
56 55.07 l
h
76 52.5 m
76.00985 52.380001 76.00985 52.259998 76 52.139999 c
76 49.139999 71 47.349998 66 47.139999 c
66 44.07 l
68.120003 45.43 71.639999 46.139999 75 46.139999 c
78.360001 46.139999 81.830002 45.450001 84 44.139999 c
84 51.389999 l
83.629997 52.52 80.620003 53.959999 76 54.139999 c
76 52.5 l
h
75 38.139999 m
80.339996 38.139999 83.790001 39.809998 84 41.029999 c
84 41.029999 84 41.099998 84 41.139999 c
84 41.369999 l
83.599998 42.57 80.199997 44.139999 75 44.139999 c
69.510002 44.139999 66 42.360001 66 41.139999 c
66 39.919998 69.510002 38.139999 75 38.139999 c
h
65 49.139999 m
70.339996 49.139999 73.790001 50.809998 74 52.029999 c
74 52.029999 74 52.099998 74 52.139999 c
74 52.369999 l
73.599998 53.57 70.199997 55.139999 65 55.139999 c
59.510002 55.139999 56 53.360001 56 52.139999 c
56 50.919998 59.509998 49.139999 65 49.139999 c
h
65 74.860001 m
59.510002 74.860001 56 73.080002 56 71.860001 c
56 65.07 l
58.119999 66.43 61.639999 67.139999 65 67.139999 c
68.360001 67.139999 71.830002 66.449997 74 65.139999 c
74 71.879997 l
74 73.080002 70.449997 74.860001 65 74.860001 c
h
76 63.860001 m
76 62.5 l
76.00985 62.380001 76.00985 62.259998 76 62.139999 c
76.004707 62.07333 76.004707 62.006664 76 61.939999 c
76 56.119999 l
76.694664 56.116692 77.386635 56.071777 78.075897 55.98526 c
78.76516 55.898746 79.446754 55.771248 80.120689 55.602764 c
80.794617 55.434277 81.456024 55.226025 82.104919 54.978004 c
82.753807 54.729984 83.385506 54.443985 84 54.119999 c
84 60.860001 l
84 62 80.879997 63.639999 76 63.84 c
76 63.860001 l
h
46.650002 58.169998 m
63.07 26.169998 l
66.68 32.169998 l
66.707245 32.236088 66.74118 32.298534 66.781815 32.357346 c
66.822441 32.416153 66.868843 32.469986 66.921021 32.518845 c
66.973198 32.567703 67.029961 32.610474 67.091309 32.64716 c
67.152657 32.683846 67.217194 32.713612 67.28492 32.736458 c
67.352654 32.759304 67.422043 32.774712 67.49308 32.782681 c
67.564117 32.790649 67.635185 32.790997 67.706291 32.783722 c
67.777405 32.776447 67.846931 32.761723 67.914879 32.73954 c
67.982834 32.717358 68.047661 32.688221 68.10936 32.652138 c
68.171074 32.616055 68.228249 32.573845 68.280899 32.525501 c
68.333549 32.477154 68.380478 32.423775 68.421684 32.365364 c
68.462891 32.306957 68.497437 32.244843 68.525322 32.179028 c
68.553207 32.113213 68.573792 32.045189 68.58709 31.974955 c
68.600388 31.904724 68.606094 31.833883 68.60421 31.762428 c
68.60231 31.690973 68.592865 31.620531 68.575859 31.551102 c
68.558868 31.481672 68.534706 31.414835 68.503372 31.350588 c
68.472038 31.286341 68.434242 31.226145 68.389999 31.169998 c
63.860001 23.579998 l
63.81448 23.50313 63.75964 23.433611 63.69548 23.371437 c
63.631329 23.309267 63.56012 23.256639 63.481857 23.213551 c
63.403599 23.170465 63.321049 23.138441 63.234207 23.117477 c
63.147369 23.096518 63.059299 23.087357 62.970001 23.089998 c
62.880749 23.092508 62.793396 23.106718 62.707951 23.132627 c
62.622505 23.158537 62.541977 23.195232 62.466358 23.242712 c
62.390739 23.290192 62.322704 23.346786 62.262245 23.412493 c
62.201786 23.478199 62.151035 23.550701 62.110001 23.629999 c
44.880001 57.240002 l
44.590103 57.176441 44.296772 57.143108 44 57.140003 c
43.716698 57.139179 43.436699 57.169178 43.16 57.230003 c
35.259998 41.430004 l
35.374775 41.35218 35.48521 41.268612 35.591301 41.179298 c
35.697392 41.089989 35.798565 40.995419 35.894821 40.895584 c
35.99107 40.795746 36.081886 40.691189 36.167263 40.581909 c
36.252644 40.472633 36.332127 40.359222 36.405708 40.241676 c
36.47929 40.12413 36.546577 40.003086 36.607571 39.87854 c
36.668564 39.753994 36.722939 39.626625 36.770687 39.496429 c
36.818428 39.36623 36.859291 39.233902 36.893272 39.099453 c
36.927258 38.965004 36.954178 38.829159 36.974033 38.69191 c
36.993885 38.554661 37.006565 38.416752 37.012074 38.278183 c
37.017586 38.139614 37.015896 38.001137 37.007004 37.862743 c
36.998108 37.72435 36.982059 37.586792 36.958862 37.450069 c
36.935658 37.313347 36.90543 37.178196 36.868176 37.044621 c
36.830917 36.911041 36.786831 36.779755 36.73592 36.650761 c
36.685005 36.521767 36.627544 36.39576 36.56353 36.272743 c
36.499512 36.149723 36.429287 36.030357 36.352852 35.914646 c
36.276417 35.798935 36.194191 35.687496 36.106171 35.580338 c
36.018147 35.473179 35.924801 35.370869 35.826138 35.273415 c
35.727474 35.175961 35.624023 35.083889 35.515785 34.9972 c
35.407543 34.910503 35.295101 34.829659 35.178452 34.754662 c
35.061802 34.679668 34.941582 34.610924 34.817783 34.548431 c
34.693985 34.485935 34.56728 34.430031 34.437664 34.380718 c
34.308052 34.331406 34.176231 34.288944 34.042202 34.253338 c
33.908173 34.217731 33.772659 34.189171 33.635658 34.16766 c
33.498661 34.146156 33.360916 34.131809 33.222424 34.124626 c
33.083931 34.117443 32.945438 34.117462 32.80695 34.124683 c
32.668457 34.131905 32.53072 34.14629 32.39373 34.167835 c
32.256737 34.189377 32.121231 34.217972 31.987209 34.253613 c
31.853189 34.289253 31.721382 34.331753 31.591784 34.381104 c
31.462183 34.430454 31.335491 34.486397 31.21171 34.548923 c
31.087929 34.61145 30.967726 34.680225 30.851099 34.755257 c
30.73447 34.830284 30.622047 34.91116 30.51383 34.997879 c
30.405615 35.084602 30.302189 35.176704 30.203554 35.274185 c
30.104916 35.371662 30.011599 35.473991 29.923607 35.581181 c
29.835613 35.688362 29.753416 35.79982 29.677017 35.915558 c
29.600615 36.031292 29.530422 36.150673 29.466438 36.273708 c
29.402454 36.396744 29.345024 36.522766 29.294149 36.651775 c
29.243273 36.780785 29.199224 36.912079 29.162003 37.045666 c
29.124781 37.179253 29.094589 37.314415 29.071428 37.451145 c
29.048264 37.587875 29.032253 37.725437 29.023399 37.863834 c
29.014544 38.002228 29.01289 38.140705 29.018438 38.279274 c
29.023985 38.417839 29.036703 38.555744 29.056595 38.692989 c
29.076485 38.830231 29.103439 38.966072 29.137461 39.100513 c
29.171478 39.234955 29.212379 39.367268 29.26016 39.497456 c
29.307941 39.62764 29.362345 39.754997 29.423374 39.879528 c
29.4844 40.004055 29.551722 40.12508 29.625336 40.242607 c
29.698952 40.360134 29.778465 40.473522 29.863874 40.582779 c
29.949282 40.692036 30.040125 40.796566 30.136406 40.89637 c
30.232687 40.996178 30.333883 41.090721 30.439999 41.180004 c
22.439999 53.180004 l
15 53.180004 l
14.934339 53.180004 14.869309 53.186409 14.80491 53.199219 c
14.740509 53.212029 14.677978 53.230995 14.617315 53.256123 c
14.556652 53.28125 14.499023 53.31205 14.444428 53.34853 c
14.389834 53.38501 14.339321 53.426464 14.292892 53.472893 c
14.246462 53.519321 14.205007 53.569832 14.168528 53.624428 c
14.132049 53.679024 14.101245 53.736652 14.076119 53.797318 c
14.05099 53.857979 14.032021 53.920509 14.019213 53.984909 c
14.006403 54.049309 13.999999 54.114342 14 54.180004 c
13.999999 54.245663 14.006403 54.310692 14.019213 54.375092 c
14.032021 54.439487 14.05099 54.502014 14.076119 54.562679 c
14.101245 54.623344 14.132049 54.680977 14.168528 54.735573 c
14.205007 54.790165 14.246462 54.840679 14.292892 54.887108 c
14.339321 54.933537 14.389833 54.974991 14.444428 55.011471 c
14.499023 55.047951 14.556652 55.078754 14.617314 55.103882 c
14.677978 55.129009 14.740509 55.147976 14.804909 55.160789 c
14.869309 55.173595 14.934339 55.18 15 55.180004 c
23 55.180004 l
23.082352 55.179577 23.163414 55.169136 23.243189 55.148682 c
23.322962 55.128227 23.399048 55.098373 23.471449 55.05912 c
23.543846 55.019867 23.61038 54.972397 23.671051 54.91671 c
23.731722 54.861019 23.784704 54.798782 23.83 54.730003 c
32.25 42.100002 l
32.497295 42.152004 32.747295 42.178673 33 42.180004 c
33.119999 42.180004 33.240002 42.180004 33.360001 42.180004 c
41.360001 58.180004 l
41.258659 58.26873 41.162048 58.362339 41.070168 58.460831 c
40.978287 58.559322 40.891602 58.662189 40.810116 58.76944 c
40.728622 58.876682 40.65274 58.987759 40.582474 59.102669 c
40.512203 59.217583 40.447903 59.335747 40.389572 59.457157 c
40.331238 59.578564 40.279171 59.702599 40.233368 59.829266 c
40.187565 59.955936 40.148262 60.084591 40.115459 60.215233 c
40.082649 60.345867 40.056507 60.477821 40.037033 60.611099 c
40.017555 60.744381 40.004845 60.878304 39.998901 61.012867 c
39.99295 61.147427 39.993797 61.281948 40.001442 61.416428 c
40.009087 61.550903 40.023487 61.684654 40.044643 61.81768 c
40.065796 61.950703 40.093597 62.082321 40.128052 62.212536 c
40.162502 62.342751 40.203426 62.470898 40.250824 62.596977 c
40.298218 62.723053 40.351845 62.846424 40.411705 62.967087 c
40.471565 63.087749 40.537354 63.20509 40.609066 63.319107 c
40.680779 63.433121 40.758049 63.543232 40.840885 63.649441 c
40.923721 63.755653 41.011696 63.857418 41.104816 63.954742 c
41.197929 64.052063 41.295715 64.144447 41.398167 64.231895 c
41.500614 64.319344 41.607208 64.401405 41.717953 64.478088 c
41.82869 64.554756 41.943008 64.625656 42.060913 64.690788 c
42.178814 64.75592 42.299698 64.814941 42.423565 64.867851 c
42.547428 64.920761 42.673641 64.9673 42.802208 65.007469 c
42.930775 65.047638 43.061043 65.081223 43.193005 65.108231 c
43.324959 65.135239 43.457939 65.155525 43.591949 65.16909 c
43.725956 65.182663 43.860306 65.189453 43.995007 65.189461 c
44.1297 65.189453 44.264053 65.182671 44.39806 65.169098 c
44.532066 65.155525 44.665054 65.135239 44.797016 65.108238 c
44.92897 65.08123 45.059231 65.047646 45.187798 65.007477 c
45.316364 64.967308 45.442577 64.920761 45.566444 64.867851 c
45.690304 64.814941 45.811188 64.75592 45.929092 64.690788 c
46.046993 64.625656 46.161316 64.554756 46.27206 64.478088 c
46.382797 64.401405 46.489388 64.319344 46.591835 64.231895 c
46.694286 64.144447 46.792068 64.052063 46.885189 63.954742 c
46.978302 63.857418 47.06628 63.75565 47.149117 63.649437 c
47.231953 63.543228 47.309231 63.433117 47.380947 63.319103 c
47.45266 63.205086 47.518444 63.087746 47.5783 62.967083 c
47.638157 62.84642 47.691788 62.723053 47.739185 62.596973 c
47.786579 62.47089 47.827503 62.342743 47.861954 62.212528 c
47.896404 62.082314 47.924206 61.950699 47.945366 61.81768 c
47.966518 61.684654 47.980911 61.550903 47.988552 61.416424 c
47.996197 61.281944 47.997047 61.147427 47.991104 61.012867 c
47.985157 60.878304 47.972446 60.744381 47.952969 60.611099 c
47.933495 60.477821 47.907356 60.345863 47.874554 60.215229 c
47.841743 60.084591 47.802437 59.955936 47.756634 59.829266 c
47.710835 59.702599 47.658768 59.578564 47.600437 59.457157 c
47.542103 59.335747 47.477802 59.217583 47.407536 59.102673 c
47.337265 58.987762 47.261383 58.876686 47.179897 58.769444 c
47.0984 58.662193 47.011711 58.559322 46.91983 58.460831 c
46.827946 58.362339 46.731335 58.26873 46.630001 58.180004 c
46.650002 58.169998 l
h
33 36.139999 m
33.065502 36.139999 33.130844 36.143211 33.196033 36.149632 c
33.261223 36.156052 33.325935 36.165653 33.390175 36.178429 c
33.454422 36.191208 33.517887 36.207104 33.580566 36.22612 c
33.64325 36.245136 33.704849 36.267174 33.765362 36.292236 c
33.825882 36.317303 33.885025 36.345276 33.942791 36.376156 c
34.000557 36.407036 34.056675 36.44067 34.111137 36.477058 c
34.165604 36.513447 34.218155 36.552422 34.268787 36.593979 c
34.31942 36.635532 34.367897 36.67947 34.414211 36.725784 c
34.460526 36.772102 34.504463 36.82058 34.546017 36.871212 c
34.58757 36.921844 34.626545 36.974392 34.662933 37.028854 c
34.699326 37.083321 34.73296 37.139439 34.76384 37.197208 c
34.794716 37.254974 34.822685 37.314117 34.847752 37.37463 c
34.872818 37.43515 34.894859 37.49675 34.913876 37.559429 c
34.932892 37.622116 34.948788 37.685577 34.961567 37.749817 c
34.97435 37.814064 34.983952 37.87878 34.990372 37.943966 c
34.996792 38.009155 35.000004 38.074501 35 38.139999 c
35.000004 38.205502 34.996792 38.270847 34.990372 38.336033 c
34.983952 38.401222 34.97435 38.465935 34.961567 38.530178 c
34.948788 38.594421 34.932892 38.657883 34.913876 38.720562 c
34.894859 38.783241 34.872818 38.844841 34.847752 38.905357 c
34.822685 38.965878 34.794716 39.025021 34.76384 39.082787 c
34.73296 39.140553 34.699326 39.196667 34.662933 39.251129 c
34.626545 39.305595 34.58757 39.358147 34.546017 39.408779 c
34.504463 39.459415 34.460526 39.507893 34.414211 39.554207 c
34.367897 39.600525 34.31942 39.644459 34.268787 39.686012 c
34.218155 39.72757 34.165604 39.766544 34.111137 39.802933 c
34.056675 39.839329 34.000557 39.872963 33.942791 39.903839 c
33.885025 39.934715 33.825882 39.962685 33.765362 39.987751 c
33.704849 40.012817 33.64325 40.034859 33.58057 40.053875 c
33.517887 40.072887 33.454422 40.088783 33.390175 40.101563 c
33.325935 40.114346 33.261223 40.123947 33.196033 40.130367 c
33.130844 40.136787 33.065502 40.139999 33 40.139999 c
32.934498 40.139999 32.869156 40.136787 32.803967 40.130367 c
32.738781 40.123947 32.674065 40.114346 32.609818 40.101563 c
32.545574 40.088783 32.482113 40.072887 32.41943 40.053875 c
32.35675 40.034859 32.295151 40.012817 32.234631 39.987751 c
32.174118 39.962685 32.114975 39.934715 32.057205 39.903839 c
31.999437 39.872963 31.943321 39.839329 31.888857 39.802933 c
31.834394 39.766544 31.781847 39.72757 31.731213 39.686012 c
31.680578 39.644459 31.632101 39.600525 31.585785 39.554207 c
31.539469 39.507893 31.495533 39.459415 31.453978 39.408779 c
31.412422 39.358147 31.373449 39.305595 31.337057 39.251129 c
31.300667 39.196667 31.267035 39.140553 31.236156 39.082787 c
31.20528 39.025021 31.177307 38.965878 31.152239 38.905357 c
31.127174 38.844841 31.105135 38.783245 31.086121 38.720566 c
31.067106 38.657887 31.051208 38.594421 31.038427 38.530178 c
31.02565 38.465935 31.01605 38.401222 31.00963 38.336033 c
31.00321 38.270847 31 38.205502 31 38.139999 c
31 38.074501 31.00321 38.009155 31.00963 37.943966 c
31.01605 37.87878 31.02565 37.814064 31.038429 37.749817 c
31.05121 37.685577 31.067108 37.622116 31.086124 37.559433 c
31.105139 37.496754 31.127178 37.435154 31.152243 37.374634 c
31.177311 37.314117 31.205282 37.254974 31.236158 37.197208 c
31.267036 37.139439 31.300671 37.083321 31.337059 37.028858 c
31.373453 36.974396 31.412426 36.921848 31.453978 36.871212 c
31.495533 36.82058 31.539471 36.772102 31.585787 36.725784 c
31.632105 36.67947 31.680582 36.635532 31.731216 36.593979 c
31.781851 36.552422 31.834398 36.513447 31.888861 36.477058 c
31.943325 36.44067 31.999441 36.407036 32.057209 36.376156 c
32.114975 36.34528 32.174118 36.317307 32.234634 36.29224 c
32.295155 36.267174 32.356754 36.245136 32.419434 36.226124 c
32.482113 36.207111 32.545574 36.191216 32.609818 36.178432 c
32.674065 36.165653 32.738781 36.156055 32.80397 36.149635 c
32.869156 36.143215 32.934498 36.140003 33 36.139999 c
h
44 63.139999 m
43.934498 63.139999 43.869152 63.136791 43.803963 63.130371 c
43.738777 63.123951 43.674061 63.114349 43.609818 63.101566 c
43.545574 63.088791 43.482109 63.072891 43.41943 63.053875 c
43.356743 63.034859 43.295143 63.012817 43.234627 62.987747 c
43.174114 62.962681 43.114971 62.934711 43.057201 62.903839 c
42.999432 62.872959 42.943317 62.839321 42.888855 62.802933 c
42.834393 62.766544 42.781841 62.72757 42.731209 62.686016 c
42.680576 62.644463 42.632099 62.600529 42.585785 62.554207 c
42.539471 62.507893 42.495533 62.459415 42.453976 62.408783 c
42.412422 62.358147 42.373451 62.305595 42.337059 62.251129 c
42.300671 62.196667 42.267036 62.140553 42.236156 62.082787 c
42.205276 62.025021 42.177303 61.965878 42.152237 61.905357 c
42.127171 61.844845 42.105133 61.783245 42.086117 61.720566 c
42.067104 61.657883 42.051208 61.594418 42.038425 61.530174 c
42.02565 61.465939 42.016052 61.401226 42.009632 61.336037 c
42.003212 61.270847 42.000004 61.205502 42 61.139999 c
42.000004 61.074497 42.003212 61.009151 42.009632 60.94397 c
42.016052 60.87878 42.02565 60.81406 42.038425 60.749813 c
42.051208 60.68557 42.067104 60.622108 42.086117 60.559429 c
42.105133 60.49675 42.127171 60.435146 42.152237 60.374626 c
42.177303 60.314114 42.205276 60.254971 42.236156 60.197201 c
42.267036 60.139435 42.300671 60.083321 42.337059 60.028854 c
42.373451 59.974396 42.412422 59.921848 42.453976 59.871216 c
42.495533 59.82058 42.539471 59.772102 42.585785 59.72578 c
42.632099 59.679466 42.680576 59.635529 42.731209 59.593975 c
42.781841 59.552418 42.834393 59.513443 42.888855 59.477051 c
42.943317 59.440662 42.999432 59.407028 43.057198 59.376152 c
43.114971 59.345276 43.174114 59.317303 43.234627 59.292236 c
43.295143 59.267174 43.356743 59.245136 43.419426 59.226124 c
43.482109 59.207108 43.545574 59.191208 43.609818 59.178429 c
43.674061 59.165653 43.738777 59.156055 43.803967 59.149635 c
43.869152 59.143215 43.934498 59.140003 44 59.139999 c
44.065502 59.140003 44.130844 59.143211 44.196033 59.149632 c
44.261219 59.156052 44.325932 59.165649 44.390175 59.178425 c
44.454418 59.191208 44.517883 59.207104 44.58057 59.22612 c
44.64325 59.245136 44.704849 59.267174 44.765362 59.292236 c
44.825882 59.317303 44.885021 59.345276 44.942787 59.376152 c
45.000561 59.407028 45.056675 59.440662 45.111137 59.477051 c
45.1656 59.513443 45.218151 59.552418 45.268787 59.593975 c
45.319424 59.635529 45.367901 59.679466 45.414215 59.72578 c
45.460537 59.772102 45.504471 59.82058 45.546024 59.871216 c
45.587578 59.921848 45.626545 59.974392 45.662933 60.028851 c
45.699329 60.083317 45.732964 60.139435 45.76384 60.197205 c
45.79472 60.254971 45.822689 60.314114 45.847755 60.374626 c
45.872822 60.435146 45.894863 60.49675 45.913879 60.559429 c
45.932896 60.622108 45.948792 60.685574 45.961567 60.749817 c
45.974346 60.81406 45.983948 60.878777 45.990368 60.943966 c
45.996788 61.009151 46 61.074497 46 61.139999 c
46 61.205502 45.996788 61.270851 45.990364 61.33604 c
45.983944 61.401226 45.974346 61.465939 45.961567 61.530174 c
45.948792 61.594418 45.932892 61.657883 45.913876 61.72057 c
45.894863 61.783249 45.872822 61.844849 45.847755 61.905361 c
45.822689 61.965881 45.79472 62.025021 45.76384 62.082787 c
45.732964 62.140553 45.699329 62.196667 45.662933 62.251129 c
45.626545 62.305595 45.587578 62.358147 45.546024 62.408783 c
45.504471 62.459415 45.460537 62.507893 45.414215 62.554207 c
45.367901 62.600529 45.319424 62.644463 45.268791 62.686016 c
45.218151 62.72757 45.1656 62.766541 45.111137 62.802929 c
45.056675 62.839321 45.000561 62.872955 44.942791 62.903835 c
44.885025 62.934715 44.825882 62.962685 44.765362 62.987751 c
44.704849 63.012821 44.64325 63.034863 44.580566 63.053879 c
44.517883 63.072895 44.454418 63.088791 44.390175 63.101566 c
44.325932 63.114349 44.261219 63.123955 44.196033 63.130375 c
44.130844 63.136791 44.065502 63.139999 44 63.139999 c
h
W
[72.007382 0 0 53.770435 14.000001 23.089561] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.000041 def
/xMax 1.000034 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1.000034 0 axialSH
Q
Q
q
[50.675148 0 0 50.692177 3687.4729 78.120308] cm
q
6.6406 23.827999 m
11.1719 23.827961 l
12.2136 23.827961 13.099 23.456871 13.828199 22.714661 c
14.57039 21.9855 14.9415 21.100061 14.9415 20.058361 c
14.9415 19.016661 14.57041 18.131262 13.828199 17.402061 c
13.099039 16.659872 12.213599 16.288761 11.1719 16.288761 c
6.6406 16.288761 l
6.6406 23.827862 l
6.6406 23.827999 l
h
6.6406 35.7617 m
12.7148 35.761719 l
13.7695 35.761719 14.6744 35.384117 15.4296 34.628918 c
16.171789 33.873707 16.5429 32.962219 16.5429 31.894518 c
16.5429 30.839817 16.17181 29.941418 15.4296 29.199219 c
14.67439 28.444008 13.7694 28.06642 12.7148 28.06642 c
6.6406 28.06642 l
6.6406 35.761719 l
6.6406 35.7617 l
h
2.4023 39.999981 m
2.402319 12.050982 l
11.171819 12.050982 l
13.385319 12.050982 15.273418 12.832232 16.835918 14.394781 c
18.398418 15.970282 19.179718 17.85828 19.179718 20.058882 c
19.179718 22.025082 18.548218 23.750282 17.285217 25.234682 c
18.365917 25.976871 19.212317 26.927382 19.824318 28.086283 c
20.475357 29.271183 20.800879 30.540783 20.800879 31.894882 c
20.800879 34.134483 20.006599 36.041981 18.418079 37.617584 c
16.842579 39.206085 14.941479 40.000385 12.714979 40.000385 c
2.401979 40.000385 l
2.4023 39.999981 l
h
29.882837 18.945 m
27.929737 20.8981 26.953136 23.254999 26.953136 26.015301 c
26.953136 28.775602 27.929697 31.1325 29.882835 33.085602 c
31.835974 35.038704 34.192837 36.015301 36.953136 36.015301 c
39.713436 36.015301 42.070335 35.038742 44.023438 33.085602 c
45.97654 31.132462 46.953136 28.775602 46.953136 26.015301 c
46.953136 23.254999 45.976578 20.898102 44.023438 18.945 c
42.070297 16.991898 39.713436 16.015301 36.953136 16.015301 c
34.192837 16.015301 31.835938 16.991861 29.882835 18.945 c
29.882837 18.945 l
h
26.875038 36.0937 m
24.088539 33.307201 22.695339 29.9478 22.695339 26.015701 c
22.695339 22.083603 24.088539 18.724102 26.875038 15.937701 c
29.661537 13.1513 33.020939 11.758001 36.953037 11.758001 c
40.885136 11.758001 44.244637 13.151201 47.031036 15.937701 c
49.817436 18.724201 51.210735 22.083601 51.210735 26.015701 c
51.210735 29.947802 49.817535 33.307301 47.031036 36.0937 c
44.244537 38.8801 40.885136 40.273399 36.953037 40.273399 c
33.020939 40.273399 29.661438 38.880199 26.875038 36.0937 c
h
54.492237 12.051 m
54.492237 40 l
68.750237 40 l
68.750237 35.7617 l
58.730236 35.7617 l
58.730236 12.050699 l
54.491936 12.050699 l
54.492237 12.051 l
h
88.359688 12.051 m
70.683685 40 l
75.703186 40 l
79.824287 33.476601 l
89.31649 33.476601 l
89.31649 40 l
93.574287 40 l
93.574287 12.051001 l
88.359489 12.051001 l
88.359688 12.051 l
h
89.316689 18.476999 m
89.316689 29.238998 l
82.50029 29.238998 l
89.316689 18.476999 l
h
102.363297 23.983999 m
102.363297 16.2887 l
108.4375 16.2887 l
109.492203 16.2887 110.397102 16.6663 111.152298 17.421499 c
111.894485 18.17671 112.265594 19.0882 112.265594 20.155899 c
112.265594 21.2106 111.894501 22.108999 111.152298 22.8512 c
110.397087 23.606411 109.492096 23.983999 108.4375 23.983999 c
102.363297 23.983999 l
h
111.601097 27.577999 m
113.059395 26.952999 114.237801 25.9765 115.136299 24.6483 c
116.060768 23.2941 116.523003 21.7967 116.523003 20.156101 c
116.523003 17.916502 115.728722 16.009001 114.140205 14.433401 c
112.564705 12.844901 110.663605 12.050601 108.437103 12.050601 c
98.1241 12.050601 l
98.1241 39.999599 l
102.362396 39.999599 l
102.362396 28.222599 l
107.147598 28.222599 l
113.260895 39.999599 l
118.046097 39.999599 l
111.601097 27.577999 l
h
W
[115.644115 0 0 28.515398 2.40198 11.758004] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
